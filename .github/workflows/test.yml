name: üß™ Test Canada Selfie App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: üß™ Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: üì¶ Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pyqt5 python3-pyqt5.qtmultimedia libgl1 libglib2.0-0 xvfb
        
    - name: üì¶ Install Python dependencies (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üì¶ Install Python dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        python -m pip install --upgrade pip
        # On Linux, PyQt5 is installed via apt-get, so we skip it in pip
        grep -v "^PyQt5" requirements.txt > requirements-no-pyqt5.txt
        pip install -r requirements-no-pyqt5.txt
        
    - name: üîç Lint with flake8 (if available)
      continue-on-error: true
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 canada_selfie_app.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 canada_selfie_app.py --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        
    - name: üß™ Test import and basic functionality
      run: |
        python -c "
        import sys
        import os
        # Set UTF-8 encoding for Windows
        if sys.platform == 'win32':
            os.environ['PYTHONIOENCODING'] = 'utf-8'
        
        print('Python version:', sys.version)
        print('Testing imports...')
        
        try:
            import PyQt5
            print('[OK] PyQt5 imported successfully')
        except ImportError as e:
            print('[ERROR] PyQt5 import failed:', e)
            
        try:
            import cv2
            print('[OK] OpenCV imported successfully')
            print('OpenCV version:', cv2.__version__)
        except ImportError as e:
            print('[ERROR] OpenCV import failed:', e)
            
        try:
            import numpy as np
            print('[OK] NumPy imported successfully')
            print('NumPy version:', np.__version__)
        except ImportError as e:
            print('[ERROR] NumPy import failed:', e)
            
        # Test optional dependency
        try:
            import rembg
            print('[OK] rembg imported successfully (optional)')
        except ImportError:
            print('[WARNING] rembg not available (optional dependency)')
            
        print('All core dependencies available!')
        "
        
    - name: üèóÔ∏è Test PyInstaller build
      run: |
        pip install pyinstaller
        echo "Testing PyInstaller spec file..."
        pyinstaller --version
        # Run the spec file test
        python test_spec_file.py